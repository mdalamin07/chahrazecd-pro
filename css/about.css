#about{
    position: relative;
    background-color: #FAF5E3F0;
}

#about a {
	text-decoration: underline;
	outline: none;
	cursor: pointer;
}

a:hover,
a:focus {
	color: var(--color-link-hover);
	outline: none;
	text-decoration: none;
}
em {
	font-weight: 500;
}

.frame {
	/* padding: 3rem 5vw;
	text-align: center;
	position: relative;
	z-index: 1000; */
	margin-top: auto;
	align-self: center;
	max-width: 260px;
	text-align: center;
	padding-bottom: 3rem;
}
.frame__about {
	display: inline-block;
	margin: 1rem 0;
	font-weight: 700;
	text-decoration: none;
	color: var(--color-text);
}

.frame__about-item {
	display: none;
}

.frame__about-item--current {
	display: inline-block;
}
#about .button {
    text-align: center;
    padding: 0rem 8vw 3rem;
}
.content {
	display: grid;
	grid-template-columns: 100%;
	grid-template-areas: "content-item";
	justify-content: center;
	position: relative;
	cursor: default;
}

.content__item {
	grid-area: content-item;
	opacity: 0;
	pointer-events: none;
	display: flex;
	align-content: center;
	flex-direction: column;
	padding: 0 1rem;
	overflow: hidden;
	height: 0;
}

.content__item--home {
	justify-content: center;
	min-height: 300px;
}

.content__item--current {
	overflow: visible;
	height: auto;
	opacity: 1;
	pointer-events: auto;
}

.content__item-credits {
	margin-top: auto;
	align-self: center;
	max-width: 260px;
	text-align: center;
	padding-bottom: 3rem;
}

.content__item-credits a {
	white-space: nowrap;
}

.content__paragraph {
	font-family: freight-big-pro, serif;
	font-size: 7vw;
	font-weight: 300;
	letter-spacing: -0.2vw;
	word-spacing: 1vw;
	text-transform: uppercase;
	margin: 0;
	line-height: 1;
	position: relative;
	overflow: hidden;
	flex: none;
}

.content__paragraph--first {
	margin-top: auto;
}

.content__paragraph--last {
	margin-bottom: auto;
}

.content__paragraph--large {
	font-size: 10vw;
}

.content__paragraph--right {
	align-self: flex-end;
}

.content__figure {
	margin: 0;
	max-width: 100%;
	margin-top: 0.5rem;
	position: relative;
}

.content__figure-img {
	max-width: 100%;
}

.content__figure-caption {
	margin: 1rem 0 0 0;
	font-size: 0.85rem;
	padding-bottom: 5rem;
}

.char {
	will-change: transform;
}
@media screen and (min-width: 53em) {
	.frame {
		position: absolute;
		text-align: left;
		top: 0;
		left: 0;
		display: grid;
		align-content: space-between;
		width: 100%;
		max-width: none;
		height: 100vh;
		padding: 3rem 8vw;
		pointer-events: none;
		grid-template-columns: 20% 60% 20%;
		grid-template-rows: auto auto auto;
		grid-template-areas: 'home title about'
							'... ... ...'
							'... ... credits';
	}
	.frame__about {
		margin: 0;
		grid-area: about;
		align-self: start;
		justify-self: end;
	}
	.frame a {
		pointer-events: auto;
	}
	.content__item {
		min-height: 95vh;
		padding: 3rem 8vw 3rem;
	}
	.content__title-inner--offset {
	    margin-top: 3rem;
	}
	.content__title-seperator {
		margin: 0 2rem;
	}
	.content__item--home {
		max-height: none;
	}
	.content__figure {
		max-width: 48vw;
		justify-self: flex-end;
		margin-left: auto;
		margin-top: -5vw;
	}
	.content__figure-caption {
		position: absolute;
		right: 100%;
		bottom: 0;
		margin-right: 2rem;
		text-align: right;
		width: 50%;
		font-size: 1rem;
		padding: 0;
	}
	.content__item-credits {
		align-self: center;
		max-width: 260px;
		text-align: center;
		padding: 0;
	}
}
/* Recommended styles for Splitting */
.splitting .word,
.splitting .char {
  display: inline-block;
}

/* Psuedo-element chars */
.splitting .char {
  position: relative;
}

/**
 * Populate the psuedo elements with the character to allow for expanded effects
 * Set to `display: none` by default; just add `display: block` when you want
 * to use the psuedo elements
 */
.splitting .char::before,
.splitting .char::after {
  content: attr(data-char);
  position: absolute;
  top: 0;
  left: 0;
  visibility: hidden;
  transition: inherit;
  user-select: none;
}

/* Expanded CSS Variables */

.splitting {
  /* The center word index */
  --word-center: calc((var(--word-total) - 1) / 2);

  /* The center character index */
  --char-center: calc((var(--char-total) - 1) / 2);

  /* The center character index */
  --line-center: calc((var(--line-total) - 1) / 2);
}

.splitting .word {
  /* Pecent (0-1) of the word's position */
  --word-percent: calc(var(--word-index) / var(--word-total));

  /* Pecent (0-1) of the line's position */
  --line-percent: calc(var(--line-index) / var(--line-total));
}

.splitting .char {
  /* Percent (0-1) of the char's position */
  --char-percent: calc(var(--char-index) / var(--char-total));

  /* Offset from center, positive & negative */
  --char-offset: calc(var(--char-index) - var(--char-center));

  /* Absolute distance from center, only positive */
  --distance: calc(
     (var(--char-offset) * var(--char-offset)) / var(--char-center)
  );

  /* Distance from center where -1 is the far left, 0 is center, 1 is far right */
  --distance-sine: calc(var(--char-offset) / var(--char-center));

  /* Distance from center where 1 is far left/far right, 0 is center */
  --distance-percent: calc((var(--distance) / var(--char-center)));
}
.splitting.cells img { width: 100%; display: block; }

@supports ( display: grid ) {
  .splitting.cells {
    position: relative;
    overflow: hidden;
    background-size: cover;
    visibility: hidden;
  }

  .splitting .cell-grid {
    background: inherit;
    position: absolute;
    top: 0; 
    left: 0; 
    width: 100%; 
    height: 100%;
    display: grid;
    grid-template: repeat( var(--row-total), 1fr ) / repeat( var(--col-total), 1fr );
  }

  .splitting .cell {
    background: inherit;
    position: relative;
    overflow: hidden;
  }

  .splitting .cell-inner {
    background: inherit;
    position: absolute;
    visibility: visible;
    /* Size to fit the whole container size */
    width: calc(100% * var(--col-total));
    height: calc(100% * var(--row-total));
    /* Position properly */
    left: calc(-100% * var(--col-index));
    top: calc(-100% * var(--row-index));
  }

  /* Helper variables for advanced effects */
  .splitting .cell {
    --center-x: calc((var(--col-total) - 1) / 2);
    --center-y: calc((var(--row-total) - 1) / 2);

    /* Offset from center, positive & negative */
    --offset-x: calc(var(--col-index) - var(--center-x));
    --offset-y: calc(var(--row-index) - var(--center-y));

    /* Absolute distance from center, only positive */
    --distance-x: calc( (var(--offset-x) * var(--offset-x)) / var(--center-x) );

    /* Absolute distance from center, only positive */
    --distance-y: calc( (var(--offset-y) * var(--offset-y)) / var(--center-y) );
  }
}